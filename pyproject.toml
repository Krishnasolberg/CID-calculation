
[tool.poetry]
name = "congestion-income-distribution-calculation"
description = "Calculation of congestion income distribution with flow-based go-live"
authors = ["Krishna Solberg <krishna.solberg@statnett.no>"]
repository = "https://gitlab.statnett.no/market-design/congestion-income-distribution-calculation.git"
version = "0.0.0"


[tool.poetry.dependencies]
python = ">=3.12,<3.13"
requests = "^2.32.3"
pandas = "^2.2.3"
bs4 = "^0.0.2"
alive-progress = "^3.2.0"
xlrd = "^2.0.1"
lxml = "^5.3.0"
dask = "^2024.10.0"
matplotlib = "^3.9.2"
seaborn = "^0.13.2"
plotly = "^5.24.1"
dash = "^2.18.2"
openpyxl = "^3.1.5"

public-api-extractor = ">=0.1.19"

python-dotenv = "^1.0.1"


[tool.poetry.group.test.dependencies]
coverage = { version = "*", extras = ['toml'] }
mock = "*"
pytest = ">= 6"  # needs pyproject.toml support
pytest-cov = "*"
pytest-integration = "*"
pytest-randomly = "*"

[tool.poetry.group.dev.dependencies]
pre-commit = "*"
ipykernel = "^6.29.5"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
pattern = '^(?P<base>\d+\.\d+\.\d+)(-?((?P<stage>[a-zA-Z]+)\.?(?P<revision>\d+)?))?$'

[tool.ruff]
line-length = 120
# Update this to match the lowest supported Python version.
target-version = 'py312'

[tool.ruff.lint]
select = [
  "A", # flake8-builtins
  "ANN", # flake8-annotations
  "ARG", # flake8-unused-arguments
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "C90", # mccabe
  "COM", # flake8-commas
  "DTZ", # flake8-datetimez
  "E", "W", # pycodestyle
  "F", # Pyflakes
  "FLY", # flynt
  "FURB", # refurb
  "I", # isort
  "N", # pep8-nameing
  "NPY", # numpy specific rules
  "PERF", # Perflint
  "PIE", # flake8-pie
  "RUF", # Ruff specific rules
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "TCH001", # flake8-type-checking
  "TRY", # tryceratops
  "UP", # pyupgrade
  "YTT", # flake8-2020
]

ignore = ['S101', 'COM812', 'ANN101', 'ANN102', 'ANN401', 'TRY003']

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/test*.py" = ["ANN201"]

[tool.ruff.lint.flake8-import-conventions]
[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
numpy = "np"
pandas = "pd"
scipy = "sp"

[tool.ruff.lint.isort]
known-first-party = []

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  "pragma: no cover",
  "raise AssertionError",
  "raise NotImplementedError",
  "if verbose:",
  "if 0:",
  "if False:",
]
skip_covered = true
show_missing = true
precision = 2

[tool.coverage.run]
branch = true
source = ["src/congestion_income_distribution_calculation"]

[tool.pytest.ini_options]
log_file = "pytest.log"
log_level = "DEBUG"
log_file_format = "%(asctime)s - %(name)s - %(levelname)s: %(message)s"
norecursedirs = "_build tmp*  __pycache__ src prof wheel_files"
markers = [
  "integration: Mark test as an integration test",
]
filterwarnings = [
]

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry.core.masonry.api"
